// 문제 설명
// 그림.png
// 위와 같은 모양으로 배열된 숫자 자판이 있습니다. 숫자 타자 대회는 이 동일한 자판을 사용하여 숫자로만 이루어진 긴 문자열을 누가 가장 빠르게 타이핑하는지 겨루는 대회입니다.

// 대회에 참가하려는 민희는 두 엄지 손가락을 이용하여 타이핑을 합니다. 민희는 항상 왼손 엄지를 4 위에, 오른손 엄지를 6 위에 두고 타이핑을 시작합니다. 엄지 손가락을 움직여 다음 숫자를 누르는 데에는 일정 시간이 듭니다. 민희는 어떤 두 숫자를 연속으로 입력하는 시간 비용을 몇몇 가중치로 분류하였습니다.

// 이동하지 않고 제자리에서 다시 누르는 것은 가중치가 1입니다.
// 상하좌우로 인접한 숫자로 이동하여 누르는 것은 가중치가 2입니다.
// 대각선으로 인접한 숫자로 이동하여 누르는 것은 가중치가 3입니다.
// 같지 않고 인접하지 않은 숫자를 누를 때는 위 규칙에 따라 가중치 합이 최소가 되는 경로를 따릅니다.
// 예를 들어 1 위에 있던 손가락을 0 으로 이동하여 누르는 것은 2 + 2 + 3 = 7 만큼의 가중치를 갖습니다.
// 단, 숫자 자판은 버튼의 크기가 작기 때문에 같은 숫자 버튼 위에 동시에 두 엄지 손가락을 올려놓을 수 없습니다. 즉, 어떤 숫자를 눌러야 할 차례에 그 숫자 위에 올려져 있는 손가락이 있다면 반드시 그 손가락으로 눌러야 합니다.

// 숫자로 이루어진 문자열 numbers가 주어졌을 때 최소한의 시간으로 타이핑을 하는 경우의 가중치 합을 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// 1 ≤ numbers의 길이 ≤ 100,000
// numbers는 아라비아 숫자로만 이루어진 문자열입니다.
// 입출력 예
// numbers	result
// "1756"	10
// "5123"	8
// 입출력 예 설명
// 입출력 예 #1
// 왼손 엄지로 17, 오른손 엄지로 56을 누르면 가중치 10으로 최소입니다.

// 입출력 예 #2
// 오른손 엄지로 5, 왼손 엄지로 123을 누르거나 오른손 엄지로 5, 왼손 엄지로 1, 오른손 엄지로 23을 누르면 가중치 8로 최소입니다.

/**
 * [x] 최소 이동 가중치 배열을 생성한다.
 * [x] DP[N][L][R]을 생성한다. 이는 CASE가 N번째인 경우 왼손이 누른 위치, 오른 손이 누른 위치를 기억한다.
 * [x] 따라서 DP[N + 1] = Math.min(DP[N][L][R], DP[N][L][R])일 것이다.
 * [x] 결과를 반환한다.
 *
 * [x] 공간 복잡도 = 11000000 (n + 1)
 * [x] 시간 복잡도 = O(N * M * 2) = 100000 * 10 * 10 = 10000000
 * [x] 따라서 문제 통과할 듯...?
 */

const weights = [
    [1, 7, 6, 7, 5, 4, 5, 3, 2, 3],
    [7, 1, 2, 4, 2, 3, 5, 4, 5, 6],
    [6, 2, 1, 2, 3, 2, 3, 5, 4, 5],
    [7, 4, 2, 1, 5, 3, 2, 6, 5, 4],
    [5, 2, 3, 5, 1, 2, 4, 2, 3, 5],
    [4, 3, 2, 3, 2, 1, 2, 3, 2, 3],
    [5, 5, 3, 2, 4, 2, 1, 5, 3, 2],
    [3, 4, 5, 6, 2, 3, 5, 1, 2, 4],
    [2, 5, 4, 5, 3, 2, 3, 2, 1, 2],
    [3, 6, 5, 4, 5, 3, 2, 4, 2, 1],
  ];
  
  const solution = (numbers) => {
    const DP = Array.from({ length: numbers.length + 1 }, () =>
      Array.from({ length: 10 }, () => new Array(10).fill(Infinity))
    );
  
    DP[0][4][6] = 0;
  
    for (let idx = 0; idx < numbers.length; idx += 1) {
      const num = numbers[idx];
  
      const prevDP = DP[idx];
      const nowDP = DP[idx + 1];
  
      for (let i = 0; i < 10; i += 1) {
        for (let j = 0; j < 10; j += 1) {
          const prevValue = prevDP[i][j];
          if (i === j || prevValue === Infinity) continue;
          
          if (nowDP[num][j] > prevValue + weights[i][num]) {
              nowDP[num][j] = prevValue + weights[i][num]
          }
            
          if (nowDP[i][num] > prevValue + weights[num][j]) {
              nowDP[i][num] = prevValue + weights[num][j]
          }
        }
      }
    }
  
    return Math.min(...DP[numbers.length].flat().flat());
  };