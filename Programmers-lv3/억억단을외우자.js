// 문제 설명
// 영우는 천하제일 암산대회를 앞두고 있습니다. 암산보다는 암기에 일가견이 있는 영우는 구구단을 확장하여 억억단을 만들고 외워버리기로 하였습니다.
// 그림1.png
// 억억단은 1억 x 1억 크기의 행렬입니다. 억억단을 외우던 영우는 친구 수연에게 퀴즈를 내달라고 부탁하였습니다.
// 수연은 평범하게 문제를 내봐야 영우가 너무 쉽게 맞히기 때문에 좀 어렵게 퀴즈를 내보려고 합니다. 적당한 수 e를 먼저 정하여 알려주고 e 이하의 임의의 수 s를 여러 개 얘기합니다. 영우는 각 s에 대해서 s보다 크거나 같고 e 보다 작거나 같은 수 중에서 억억단에서 가장 많이 등장한 수를 답해야 합니다. 만약 가장 많이 등장한 수가 여러 개라면 그 중 가장 작은 수를 답해야 합니다.
// 수연은 영우가 정답을 말하는지 확인하기 위해 당신에게 프로그램 제작을 의뢰하였습니다. e와 s의 목록 starts가 매개변수로 주어질 때 각 퀴즈의 답 목록을 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// 1 ≤ e ≤ 5,000,000
// 1 ≤ starts의 길이 ≤ min {e,100,000}
// 1 ≤ starts의 원소 ≤ e
// starts에는 중복되는 원소가 존재하지 않습니다.
// 입출력 예
// e	starts	result
// 8	[1,3,7]	[6,6,8]
// 입출력 예 설명
// 억억단에서 1 ~ 8이 등장하는 횟수는 다음과 같습니다.

// 1번 등장 : 1
// 2번 등장 : 2, 3, 5, 7
// 3번 등장 : 4
// 4번 등장 : 6, 8

// [1, 8] 범위에서는 6과 8이 각각 4번씩 등장하여 가장 많은데 6이 더 작은 수이므로 6이 정답입니다.
// [3, 8] 범위에서도 위와 같으므로 6이 정답입니다.
// [7, 8] 범위에서는 7은 2번, 8은 4번 등장하므로 8이 정답입니다.a

function solution(e, starts) {
	// 1) e이하의 자연수이기 때문에 e만큼 배열 생성
    const numsArr = new Array(e+1).fill(0);

    /*
      2) 약수의 개수를 한번에 count하는 반복문
    	 인덱스 번호를 자연수로 정하고, 해당 자연수에 대한 약수를 
         반복문을 통해 하나씩 증가시킨다.
    */
    for(let i = 1;i<=e;i++) {
        for(let j = i;j<=e;j += i) {
            // 3) 해당 자연수(j)의 배수를 찾아 1씩 증가 하므로 약수의 개수를 하나씩 늘려간다.
            numsArr[j] += 1;
        }
    }
    
    // 4) 범위의 Max값을 담는 배열 생성
    const maxArr = new Array(e+1).fill(e);
   
    // 5) 범위별 Max값을 구하는 반복문
    for(let i=e-1; i>0; i--) {
    
        /* 
          6) maxArr에 담긴 값은 Max값의 자연수(인덱스) 이므로 
             numsArr에서 자연수의 약수 개수를 가져온다.
        */
        if(numsArr[i] >= numsArr[maxArr[i+1]]) {
        
            // 7) 약수의 개수가 크면 해당 자연수(인덱스)를 현재 maxArr에 담는다.
            maxArr[i] = i;

        } else {
            // 8) 약수의 개수가 작으면 앞으 자연수(index)를 현재 maxArr에 담는다.
            maxArr[i] = maxArr[i+1];
        }
    }
    
    // 9) 범위별 Max값이 구해져 있으므로 가져와 return 한다. 
    return starts.map(s => maxArr[s]);
}