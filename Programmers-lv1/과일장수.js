// // 문제 설명
// // 과일 장수가 사과 상자를 포장하고 있습니다. 사과는 상태에 따라 1점부터 k점까지의 점수로 분류하며, k점이 최상품의 사과이고 1점이 최하품의 사과입니다. 사과 한 상자의 가격은 다음과 같이 결정됩니다.

// // 한 상자에 사과를 m개씩 담아 포장합니다.
// // 상자에 담긴 사과 중 가장 낮은 점수가 p (1 ≤ p ≤ k)점인 경우, 사과 한 상자의 가격은 p * m 입니다.
// // 과일 장수가 가능한 많은 사과를 팔았을 때, 얻을 수 있는 최대 이익을 계산하고자 합니다.(사과는 상자 단위로만 판매하며, 남는 사과는 버립니다)

// // 예를 들어, k = 3, m = 4, 사과 7개의 점수가 [1, 2, 3, 1, 2, 3, 1]이라면, 다음과 같이 [2, 3, 2, 3]으로 구성된 사과 상자 1개를 만들어 판매하여 최대 이익을 얻을 수 있습니다.

// // (최저 사과 점수) x (한 상자에 담긴 사과 개수) x (상자의 개수) = 2 x 4 x 1 = 8
// // 사과의 최대 점수 k, 한 상자에 들어가는 사과의 수 m, 사과들의 점수 score가 주어졌을 때, 과일 장수가 얻을 수 있는 최대 이익을 return하는 solution 함수를 완성해주세요.


// 입출력 예 #1

// 문제의 예시와 같습니다.
// 입출력 예 #2

// 다음과 같이 사과 상자를 포장하여 모두 팔면 최대 이익을 낼 수 있습니다.
// 사과 상자	가격
// [1, 1, 2]	1 x 3 = 3
// [2, 2, 2]	2 x 3 = 6
// [4, 4, 4]	4 x 3 = 12
// [4, 4, 4]	4 x 3 = 12
// 따라서 (1 x 3 x 1) + (2 x 3 x 1) + (4 x 3 x 2) = 33을 return합니다.


function solution(k, m, score) {
    // 먼저 최대 이익을 위해 score를 내림차순으로 정렬합니다.
    // ex) [3, 3, 2, 2, 1, 1, 1]
    score.sort((a, b) => b - a);
  
    let answer = 0;
  
    // 최저 사과 점수 m - 1번 째 인덱스를 셋팅합니다.
    // 내림차순으로 정렬했기에 가능
    let idx = m - 1;
  
    // score 길이와 상자안에 들어갈 사과의 수를 나누어
    // 최대 상자 갯수를 구하고 그만큼만 반복문을 돌려줍니다.
    // ex) 7 / 4 = 1 사과가 7개고 한 박스에 4개씩이기에
    // 단 하나의 사과 박스만 구할 수 있습니다.
    for (let i = 0; i < Math.floor(score.length / m); i++) {
  
      // 아까 구한 idx번째(최저 점수)와 상자에 담긴 개수를 곱하고
      // 정답에 더해줍니다.
      // ex) [3, 3, 2, (2), 1, 1, 1]
      answer += score[idx] * m;
  
      // 그 다음 그 다음 상자의 최저 점수 사과를 고르기위해
      // m을 더해줍니다.
      idx += m;
    }
  
    return answer;
  }