// // 문제 설명
// // 코니는 영어 단어가 적힌 카드 뭉치 두 개를 선물로 받았습니다. 코니는 다음과 같은 규칙으로 카드에 적힌 단어들을 사용해 원하는 순서의 단어 배열을 만들 수 있는지 알고 싶습니다.

// // 원하는 카드 뭉치에서 카드를 순서대로 한 장씩 사용합니다.
// // 한 번 사용한 카드는 다시 사용할 수 없습니다.
// // 카드를 사용하지 않고 다음 카드로 넘어갈 수 없습니다.
// // 기존에 주어진 카드 뭉치의 단어 순서는 바꿀 수 없습니다.
// // 예를 들어 첫 번째 카드 뭉치에 순서대로 ["i", "drink", "water"], 두 번째 카드 뭉치에 순서대로 ["want", "to"]가 적혀있을 때 ["i", "want", "to", "drink", "water"] 순서의 단어 배열을 만들려고 한다면 첫 번째 카드 뭉치에서 "i"를 사용한 후 두 번째 카드 뭉치에서 "want"와 "to"를 사용하고 첫 번째 카드뭉치에 "drink"와 "water"를 차례대로 사용하면 원하는 순서의 단어 배열을 만들 수 있습니다.

// // 문자열로 이루어진 배열 cards1, cards2와 원하는 단어 배열 goal이 매개변수로 주어질 때, cards1과 cards2에 적힌 단어들로 goal를 만들 있다면 "Yes"를, 만들 수 없다면 "No"를 return하는 solution 함수를 완성해주세요.


// 입출력 예 설명
// 입출력 예 #1

// 본문과 같습니다.

// 입출력 예 #2

// cards1에서 "i"를 사용하고 cards2에서 "want"와 "to"를 사용하여 "i want to"까지는 만들 수 있지만 "water"가 "drink"보다 먼저 사용되어야 하기 때문에 해당 문장을 완성시킬 수 없습니다. 따라서 "No"를 반환합니다.


function solution(cards1, cards2, goal) {
    // cards1과 cards2에 이용할 카드를 사용할 순서
    let idx1 = 0;
    let idx2 = 0;
  
    // goal의 길이는 cards1의 길이 + cards2의 길이이므로
    // goal을 for문으로 돌려 모든 단어를 확인해본다.
    for (let word of goal) {
  
      // * 원하는 카드 뭉치에서 카드를 순서대로 한 장씩 사용합니다.
      // 현재 들어온 단어가 cards1에 idx1 순서에 있다면
      // idx1을 1 증가시키고 넘어간다.
      if (cards1[idx1] === word) idx1++;
  
      // cards1 현재 순서에 단어가 같지 않다면
      // cards2 현재 순서의 단어와 같은지 확인한다.
      // 현재 순서에 있다면 idx2를 1 증가시키고 넘어간다.
      else if (cards2[idx2] === word) idx2++;
      
      // cards1과 cards2의 순서에 단어가 다 다르다면
      // 문장을 만들수 없으므로 No를 반환해준다.
      else return "No";
    }
  
    // for문을 통과했으면 문장을 만든 것이므로 Yes를 반환해준다.
    return "Yes";
  }