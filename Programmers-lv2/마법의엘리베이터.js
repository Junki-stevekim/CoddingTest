// 마법의 세계에 사는 민수는 아주 높은 탑에 살고 있습니다. 탑이 너무 높아서 걸어 다니기 힘든 민수는 마법의 엘리베이터를 만들었습니다. 마법의 엘리베이터의 버튼은 특별합니다. 마법의 엘리베이터에는 -1, +1, -10, +10, -100, +100 등과 같이 절댓값이 10c (c ≥ 0 인 정수) 형태인 정수들이 적힌 버튼이 있습니다. 마법의 엘리베이터의 버튼을 누르면 현재 층 수에 버튼에 적혀 있는 값을 더한 층으로 이동하게 됩니다. 단, 엘리베이터가 위치해 있는 층과 버튼의 값을 더한 결과가 0보다 작으면 엘리베이터는 움직이지 않습니다. 민수의 세계에서는 0층이 가장 아래층이며 엘리베이터는 현재 민수가 있는 층에 있습니다.

// 마법의 엘리베이터를 움직이기 위해서 버튼 한 번당 마법의 돌 한 개를 사용하게 됩니다.예를 들어, 16층에 있는 민수가 0층으로 가려면 -1이 적힌 버튼을 6번, -10이 적힌 버튼을 1번 눌러 마법의 돌 7개를 소모하여 0층으로 갈 수 있습니다. 하지만, +1이 적힌 버튼을 4번, -10이 적힌 버튼 2번을 누르면 마법의 돌 6개를 소모하여 0층으로 갈 수 있습니다.

// 마법의 돌을 아끼기 위해 민수는 항상 최소한의 버튼을 눌러서 이동하려고 합니다. 민수가 어떤 층에서 엘리베이터를 타고 0층으로 내려가는데 필요한 마법의 돌의 최소 개수를 알고 싶습니다. 민수와 마법의 엘리베이터가 있는 층을 나타내는 정수 storey 가 주어졌을 때, 0층으로 가기 위해 필요한 마법의 돌의 최소값을 return 하도록 solution 함수를 완성하세요.

// 제한사항
// 1 ≤ storey ≤ 100,000,000
// 입출력 예
// storey	result
// 16	6
// 2554	16
// 입출력 예 설명
// 입출력 예 #1

// 문제 예시와 같습니다.
// 입출력 예 #2

// -1, +100이 적힌 버튼을 4번, +10이 적힌 버튼을 5번, -1000이 적힌 버튼을 3번 누르면 0층에 도착 할 수 있습니다. 그러므로 16을 return 합니다.

function solution(storey) {
    // 가장 높은 수를 설정해줍니다.
    let answer = Number.MAX_SAFE_INTEGER;
  
    // DFS 함수를 만들어줍니다.
    // num 숫자, counter 층
    function dfs(num, counter) {
      // 성능을 위해 기존에 구해둔 answer보다 counter가 높다면 종료시킵니다.
      if (counter >= answer) return;
  
      // num이 0이 되면 answer에 현재 까지 더한 층 값을 넣어줍니다.
      if (num === 0) answer = counter;
      else {
  
        // num이 0이 아닐시 일단 일의 자리 수를 구하고
        let res = num % 10;
  
        // 재귀를 통해 DFS(깊이우선탐색)을 실행합니다.
        // 층을 내려갔을 경우
        // num으로 그냥 나누기 10을 하고 counter로는 미리 구한 값을 더해줍니다.
        dfs(Math.floor(num / 10), counter + res);
  
        // 층을 올라갔을 경우
        // num을 10으로 나누고 올라가기 떄문에 1층을 더해줍니다.
        // counter는 10층에서 구한 값을 뺸 값을 더해줍니다.
        dfs(Math.floor(num / 10) + 1, counter + 10 - res);
      }
    }
    dfs(storey, 0);
    return answer;
  }
  
  console.log(solution(16)); // 6
  console.log(solution(2554)); // 16